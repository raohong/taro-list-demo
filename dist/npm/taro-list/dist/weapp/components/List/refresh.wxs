var REFRESH_STATUS = {
  NONE: 'none',
  PULL: 'pull',
  ACTIVE: 'active',
  RELEASE: 'release'
};
var inititalY = 0;
var draging = false;
var offset = 0;
var status = REFRESH_STATUS.NONE;

function easing(offset, damping, distanceToRefresh) {
  return offset > distanceToRefresh
    ? Math.min(damping, offset / (1 + Math.abs(offset) * 0.002))
    : offset;
}

function clamp(value, min, max) {
  return Math.max(min, Math.min(value, max));
}

function handleTouchStart(evt, ownerInstance) {
  var body = ownerInstance.selectComponent('.zyouh-list__body');
  var config = body.getDataset().config;

  if (status === REFRESH_STATUS.RELEASE) {
    return false;
  }

  initialY = evt.touches[0].clientY;
}

function handleTouchMove(evt, ownerInstance) {
  // 小程序中只有不可滚动的时候才会触发 touchmove 所以这里不进行是否有滚动判断
  if (status === REFRESH_STATUS.RELEASE) {
    return false;
  }

  var cy = evt.touches[0].clientY;

  // 当前值不能超过初始值
  if (cy < initialY && offset < 1) {
    return false;
  }

  var indicator = ownerInstance.selectComponent('.zyouh-list__indicator-container');
  var body = ownerInstance.selectComponent('.zyouh-list__body');
  var config = body.getDataset().config;
  var damping = config.damping;
  var distanceToRefresh = config.distanceToRefresh;

  if (config.disabled) {
    return false;
  }

  if (!draging) {
    draging = true;
    initialY = cy;
    body.removeClass('zyouh-list__body-transition');
  }

  var deltaY = easing(cy - initialY, damping, distanceToRefresh);
  // 设置偏移值
  updateOffset(config, deltaY, body, indicator);

  if (deltaY < distanceToRefresh) {
    if (status !== REFRESH_STATUS.PULL) {
      status = REFRESH_STATUS.PULL;
    }

    // 恢复 indicator 的静止
  } else {
    if (status !== REFRESH_STATUS.ACTIVE) {
      status = REFRESH_STATUS.ACTIVE;
    }
  }

  // 必须阻止 不然很卡
  return false;
}

function handleTouchEnd(evt, ownerInstance) {
  var indicator = ownerInstance.selectComponent('.zyouh-list__indicator-container');
  var body = ownerInstance.selectComponent('.zyouh-list__body');
  var config = body.getDataset().config;

  if (status === REFRESH_STATUS.RELEASE) {
    return false;
  }

  if (draging) {
    draging = false;
    body.addClass('zyouh-list__body-transition');
  }

  if (status === REFRESH_STATUS.ACTIVE) {
    setRefresh(config, body, indicator, ownerInstance);
  } else {
    reset(config, body, indicator);
  }
}

function reset(config, body, indicator) {
  initialY = 0;
  status = REFRESH_STATUS.NONE;
  indicator.removeClass('flashing');

  updateOffset(config, 0, body, indicator);
}

function updateOffset(config, deltaY, body, indicator) {
  var distanceToRefresh = config.distanceToRefresh;

  offset = deltaY;

  body.setStyle({
    transform: 'translate3d(0, ' + deltaY + 'px, 0)'
  });
  indicator.setStyle({
    'margin-top':
      clamp(deltaY - distanceToRefresh, -distanceToRefresh, 0) + 'px'
  });
}

function setRefresh(config, body, indicator, ownerInstance) {
  status = REFRESH_STATUS.RELEASE;

  if (!indicator.hasClass('flashing')) {
    indicator.addClass('flashing');
  }

  updateOffset(config, config.distanceToRefresh, body, indicator);
  ownerInstance.callMethod('onRefresh');
}

function triggerRefresh(refreshing, oldValue, ownerInstance) {
  var indicator = ownerInstance.selectComponent('.zyouh-list__indicator-container');
  var body = ownerInstance.selectComponent('.zyouh-list__body');
  var config = body.getDataset().config;

  if (draging) {
    return;
  }

  if (refreshing && !disabled) {
    setRefresh(config, body, indicator, ownerInstance);
  } else {
    reset(config, body, indicator);
  }
}

function closeRefresh(closed, oldValue, ownerInstance) {
  var indicator = ownerInstance.selectComponent('.zyouh-list__indicator-container');
  var body = ownerInstance.selectComponent('.zyouh-list__body');
  var config = body.getDataset().config;

  if (draging) {
    return;
  }

  if (closed) {
    reset(config, body, indicator);
  }
}

module.exports = {
  triggerRefresh: triggerRefresh,
  closeRefresh: closeRefresh,
  handleTouchEnd: handleTouchEnd,
  handleTouchStart: handleTouchStart,
  handleTouchMove: handleTouchMove
};
